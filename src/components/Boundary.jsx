/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useGLTF, meshBounds, Html } from "@react-three/drei";
import { Physics, Debug, RigidBody } from "@react-three/rapier";
import { BackSide } from "three";

export default function Boundary(props) {
  const { nodes, materials } = useGLTF("/libraryboundary.glb");

  const [videoPlayer1Open, setVideoPlayer1Open] = useState(false);
  const eventHandler1 = (event) => {
    setVideoPlayer1Open((current) => !current);
    console.log(event);
  };

  const [videoPlayer2Open, setVideoPlayer2Open] = useState(false);
  const eventHandler2 = (event) => {
    setVideoPlayer2Open((current) => !current);
    console.log(event);
  };

  const [videoPlayer3Open, setVideoPlayer3Open] = useState(false);
  const eventHandler3 = (event) => {
    setVideoPlayer3Open((current) => !current);
    console.log(event);
  };

  const [videoPlayer4Open, setVideoPlayer4Open] = useState(false);
  const eventHandler4 = (event) => {
    setVideoPlayer4Open((current) => !current);
    console.log(event);
  };

  const [videoPlayer5Open, setVideoPlayer5Open] = useState(false);
  const eventHandler5 = (event) => {
    setVideoPlayer5Open((current) => !current);
    console.log(event);
  };

  const [videoPlayer6Open, setVideoPlayer6Open] = useState(false);
  const eventHandler6 = (event) => {
    setVideoPlayer6Open((current) => !current);
    console.log(event);
  };

  const [videoPlayer7Open, setVideoPlayer7Open] = useState(false);
  const eventHandler7 = (event) => {
    setVideoPlayer7Open((current) => !current);
    console.log(event);
  };

  const [videoPlayer8Open, setVideoPlayer8Open] = useState(false);
  const eventHandler8 = (event) => {
    setVideoPlayer8Open((current) => !current);
    console.log(event);
  };

  const [videoPlayer9Open, setVideoPlayer9Open] = useState(false);
  const eventHandler9 = (event) => {
    setVideoPlayer9Open((current) => !current);
    console.log(event);
  };

  const [videoPlayer10Open, setVideoPlayer10Open] = useState(false);
  const eventHandler10 = (event) => {
    setVideoPlayer9Open((current) => !current);
    console.log(event);
  };


  return (
    <group {...props} dispose={null}>
      <Physics gravity={[0, 0, 0]}>
        <Debug />

            {/* 
    */}
        <RigidBody fixed colliders="cuboid">
          <mesh
            name="RightWall"
            geometry={nodes.RightWall.geometry}
            position={[-10.79, 2.65, -9.39]}
            rotation={[-Math.PI / 2, 0, -Math.PI / 2]}
            scale={[13.7, 13.7, 2.95]}
            side={BackSide}
            >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Floor"
            position={[0, -2, 0]}
            rotation={[0, 0, 0]}
            scale={[10.69, 2, 13]}
          >
            <boxGeometry args={[13, 0.5, 13]} />

          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="DoorWall"
            geometry={nodes.BackWall.geometry}
            position={[0.16, 2.65, 1.66]}
            rotation={[-Math.PI / 2, 0, -Math.PI]}
            scale={[10.69, 13.7, 2.95]}
                        side={BackSide}

          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="BackWall"
            geometry={nodes.BackWall.geometry}
            position={[0.16, 2.65, -21.66]}
            rotation={[-Math.PI / 2, 0, -Math.PI]}
            scale={[10.69, 13.7, 2.95]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="LeftWall"
            geometry={nodes.LeftWall.geometry}
            position={[10.93, 2.65, -9.04]}
            rotation={[-Math.PI / 2, 0, -Math.PI / 2]}
            scale={[13.7, 13.7, 2.95]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Boundary"
            geometry={nodes.Boundary.geometry}
            position={[6.06, 2.07, -20.81]}
            scale={[2.52, 2.21, 0.39]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Boundary002"
            geometry={nodes.Boundary002.geometry}
            position={[6.06, 2.07, -11.86]}
            scale={[2.52, 2.21, 0.39]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Boundary001"
            geometry={nodes.Boundary001.geometry}
            position={[6.06, 2.07, -16.36]}
            scale={[2.52, 2.21, 0.39]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Boundary003"
            geometry={nodes.Boundary003.geometry}
            position={[6.06, 2.07, -7.36]}
            scale={[2.52, 2.21, 0.39]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Boundary006"
            geometry={nodes.Boundary006.geometry}
            position={[-5.89, 2.07, 1.75]}
            scale={[2.52, 2.21, 0.39]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Boundary004"
            geometry={nodes.Boundary004.geometry}
            position={[6.06, 2.07, -2.76]}
            scale={[2.52, 2.21, 0.39]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Boundary007"
            geometry={nodes.Boundary007.geometry}
            position={[-5.89, 2.07, -2.8]}
            scale={[2.52, 2.21, 0.39]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Boundary005"
            geometry={nodes.Boundary005.geometry}
            position={[6.06, 2.07, 1.75]}
            scale={[2.52, 2.21, 0.39]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Boundary008"
            geometry={nodes.Boundary008.geometry}
            position={[-5.89, 2.07, -7.38]}
            scale={[2.52, 2.21, 0.39]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Boundary010"
            geometry={nodes.Boundary010.geometry}
            position={[-5.89, 2.07, -16.38]}
            scale={[2.52, 2.21, 0.39]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Boundary009"
            geometry={nodes.Boundary009.geometry}
            position={[-5.89, 2.07, -11.86]}
            scale={[2.52, 2.21, 0.39]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Boundary011"
            geometry={nodes.Boundary011.geometry}
            position={[-5.89, 2.07, -20.84]}
            scale={[2.52, 2.21, 0.39]}
          >
            <meshBasicMaterial color="red" />
          </mesh>
        </RigidBody>

   //Right Side
   <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Statue002"
            geometry={nodes.Statue002.geometry}
            position={[3.24, 0.91, -11.82]}
            scale={[0.3, 1.11, 0.29]}
            onClick={eventHandler1}
            raycast={meshBounds}
            onPointerEnter={() => {
              document.body.style.cursor = "pointer";
            }}
            onPointerLeave={() => {
              document.body.style.cursor = "default";
            }}
            visible={false}

          >
     

            {videoPlayer1Open && (
              <Html
              position={[2, 3, -5]}
              wrapperClass="video-container"
                centers
                distanceFactor={8}
              >
                <div id="video-player">
                  <video
                    id="my-video"
                    class="video-js"
                    controls
                    preload="auto"
                    width="360"
                    height="270"
                    poster=""
                    data-setup="{}"
                  >
                    <source src="galaxyShort.mp4" type="video/mp4" />
                  </video>
                </div>
              </Html>
            )}
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Statue"
            geometry={nodes.Statue.geometry}
            position={[3.24, 0.91, -2.83]}
            scale={[0.27, 1.01, 0.26]}
            onClick={eventHandler2}
            raycast={meshBounds}
            onPointerEnter={() => {
              document.body.style.cursor = "pointer";
            }}
            onPointerLeave={() => {
              document.body.style.cursor = "default";
            }}
            visible={false}

          >
     

            {videoPlayer2Open && (
              <Html
              position={[2, 3, -5]}
              wrapperClass="video-container"
                centers
                distanceFactor={8}
              >
                <div id="video-player">
                  <video
                    id="my-video"
                    class="video-js"
                    controls
                    preload="auto"
                    width="360"
                    height="270"
                    poster=""
                    data-setup="{}"
                  >
                    <source src="galaxyShort.mp4" type="video/mp4" />
                  </video>
                </div>
              </Html>
            )}
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Statue003"
            geometry={nodes.Statue003.geometry}
            position={[3.24, 0.91, -16.35]}
            scale={[0.3, 1.11, 0.29]}
            onClick={eventHandler3}
            raycast={meshBounds}
            onPointerEnter={() => {
              document.body.style.cursor = "pointer";
            }}
            onPointerLeave={() => {
              document.body.style.cursor = "default";
            }}
            visible={false}

          >
         

            {videoPlayer3Open && (
              <Html
              position={[2, 3, -5]}
              wrapperClass="video-container"
                centers
                distanceFactor={8}
              >
                <div id="video-player">
                  <video
                    id="my-video"
                    class="video-js"
                    controls
                    preload="auto"
                    width="360"
                    height="270"
                    poster=""
                    data-setup="{}"
                  >
                    <source src="galaxyShort.mp4" type="video/mp4" />
                  </video>
                </div>
              </Html>
            )}
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Statue001"
            geometry={nodes.Statue001.geometry}
            position={[3.24, 0.91, -7.32]}
            scale={[0.3, 1.11, 0.29]}
            onClick={eventHandler4}
            raycast={meshBounds}
            onPointerEnter={() => {
              document.body.style.cursor = "pointer";
            }}
            onPointerLeave={() => {
              document.body.style.cursor = "default";
            }}
            visible={false}

          >
     
            {videoPlayer4Open && (
              <Html
              position={[2, 3, -5]}
              wrapperClass="video-container"
                centers
                distanceFactor={8}
              >
                <div id="video-player">
                  <video
                    id="my-video"
                    class="video-js"
                    controls
                    preload="auto"
                    width="360"
                    height="270"
                    poster=""
                    data-setup="{}"
                  >
                    <source src="galaxyShort.mp4" type="video/mp4" />
                  </video>
                </div>
              </Html>
            )}
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Statue004"
            geometry={nodes.Statue004.geometry}
            position={[3.24, 0.91, -20.85]}
            scale={[0.3, 1.11, 0.29]}
            onClick={eventHandler5}
            raycast={meshBounds}
            onPointerEnter={() => {
              document.body.style.cursor = "pointer";
            }}
            onPointerLeave={() => {
              document.body.style.cursor = "default";
            }}
            visible={false}

          >
       
            {videoPlayer5Open && (
              <Html
              position={[2, 3, -5]}
              wrapperClass="video-container"
                centers
                distanceFactor={8}
              >
                <div id="video-player">
                  <video
                    id="my-video"
                    class="video-js"
                    controls
                    preload="auto"
                    width="360"
                    height="270"
                    poster=""
                    data-setup="{}"
                  >
                    <source src="galaxyShort.mp4" type="video/mp4" />
                  </video>
                </div>
              </Html>
            )}
          </mesh>
        </RigidBody>

   // Left Side

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Statue006"
            geometry={nodes.Statue006.geometry}
            position={[-3.06, 0.91, -7.32]}
            scale={[0.3, 1.11, 0.29]}
            onClick={eventHandler6}
            raycast={meshBounds}
            onPointerEnter={() => {
              document.body.style.cursor = "pointer";
            }}
            onPointerLeave={() => {
              document.body.style.cursor = "default";
            }}
            visible={false}

          >

            {videoPlayer6Open && (
              <Html
              position={[2, 3, 5]}
              wrapperClass="video-container"
                centers
                distanceFactor={8}
              >
                <div id="video-player">
                  <video
                    id="my-video"
                    class="video-js"
                    controls
                    preload="auto"
                    width="360"
                    height="270"
                    poster=""
                    data-setup="{}"
                  >
                    <source src="galaxyShort.mp4" type="video/mp4" />
                  </video>
                </div>
              </Html>
            )}
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Statue005"
            geometry={nodes.Statue005.geometry}
            position={[-3.06, 0.91, -2.82]}
            scale={[0.27, 1.01, 0.26]}
            onClick={eventHandler7}
            raycast={meshBounds}
            onPointerEnter={() => {
              document.body.style.cursor = "pointer";
            }}
            onPointerLeave={() => {
              document.body.style.cursor = "default";
            }}
            visible={false}

          >
      
            {videoPlayer7Open && (
              <Html
              position={[2, 3, 5]}
              wrapperClass="video-container"
                centers
                distanceFactor={8}
              >
                <div id="video-player">
                  <video
                    id="my-video"
                    class="video-js"
                    controls
                    preload="auto"
                    width="360"
                    height="270"
                    poster=""
                    data-setup="{}"
                  >
                    <source src="galaxyShort.mp4" type="video/mp4" />
                  </video>
                </div>
              </Html>
            )}
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Statue007"
            geometry={nodes.Statue007.geometry}
            position={[-3.06, 0.91, -11.82]}
            scale={[0.3, 1.11, 0.29]}
            onClick={eventHandler8}
            raycast={meshBounds}
            onPointerEnter={() => {
              document.body.style.cursor = "pointer";
            }}
            onPointerLeave={() => {
              document.body.style.cursor = "default";
            }}
            visible={false}

          >
        

            {videoPlayer8Open && (
              <Html
              position={[2, 3, 5]}

              wrapperClass="video-container"
                centers
                distanceFactor={8}
              >
                <div id="video-player">
                  <video
                    id="my-video"
                    class="video-js"
                    controls
                    preload="auto"
                    width="360"
                    height="270"
                    poster=""
                    data-setup="{}"
                  >
                    <source src="galaxyShort.mp4" type="video/mp4" />
                  </video>
                </div>
              </Html>
            )}
          </mesh>
        </RigidBody>

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Statue008"
            geometry={nodes.Statue008.geometry}
            position={[-3.06, 0.91, -16.35]}
            scale={[0.3, 1.11, 0.29]}
            onClick={eventHandler9}
            raycast={meshBounds}
            onPointerEnter={() => {
              document.body.style.cursor = "pointer";
            }}
            onPointerLeave={() => {
              document.body.style.cursor = "default";
            }}
            visible={false}

          >
    

            {videoPlayer9Open && (
              <Html
              position={[2, 3, 5]}
              wrapperClass="video-container"
                centers
                distanceFactor={8}
              >
                <div id="video-player">
                  <video
                    id="my-video"
                    class="video-js"
                    controls
                    preload="auto"
                    width="360"
                    height="270"
                    poster=""
                    data-setup="{}"
                  >
                    <source src="galaxyShort.mp4" type="video/mp4" />
                  </video>
                </div>
              </Html>
            )}
          </mesh>
        </RigidBody>
             

        <RigidBody type="fixed" colliders="cuboid">
          <mesh
            name="Statue009"
            geometry={nodes.Statue009.geometry}
            position={[-3.06, 0.91, -20.85]}
            scale={[0.3, 1.11, 0.29]}
            onClick={eventHandler10}
            raycast={meshBounds}
            onPointerEnter={() => {
              document.body.style.cursor = "pointer";
            }}
            onPointerLeave={() => {
              document.body.style.cursor = "default";
            }}
            visible={false}
          >
    

            {videoPlayer10Open && (
              <Html
              position={[2, 3, 5]}
                wrapperClass="video-container"
                centers
                distanceFactor={8}
              >
                <div id="video-player">
                  <video
                    id="my-video"
                    class="video-js"
                    controls
                    preload="auto"
                    width="360"
                    height="270"
                    poster=""
                    data-setup="{}"
                  >
                    <source src="galaxyShort.mp4" type="video/mp4" />
                  </video>
                </div>
              </Html>
            )}
          </mesh>
        </RigidBody> 

      </Physics>
    </group>
  );
}

useGLTF.preload("/libraryboundary.glb");
