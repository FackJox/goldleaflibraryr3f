{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GAstVisitor = void 0;\nvar model_1 = require(\"./model\");\nvar GAstVisitor = /** @class */function () {\n  function GAstVisitor() {}\n  GAstVisitor.prototype.visit = function (node) {\n    var nodeAny = node;\n    switch (nodeAny.constructor) {\n      case model_1.NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n      case model_1.Alternative:\n        return this.visitAlternative(nodeAny);\n      case model_1.Option:\n        return this.visitOption(nodeAny);\n      case model_1.RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n      case model_1.RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n      case model_1.RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n      case model_1.Repetition:\n        return this.visitRepetition(nodeAny);\n      case model_1.Alternation:\n        return this.visitAlternation(nodeAny);\n      case model_1.Terminal:\n        return this.visitTerminal(nodeAny);\n      case model_1.Rule:\n        return this.visitRule(nodeAny);\n      /* istanbul ignore next */\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  };\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitNonTerminal = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitAlternative = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitOption = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRepetition = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRepetitionMandatory = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRepetitionWithSeparator = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitAlternation = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitTerminal = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRule = function (node) {};\n  return GAstVisitor;\n}();\nexports.GAstVisitor = GAstVisitor;","map":{"version":3,"sources":["../../src/visitor.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAcA,IAAA,WAAA,GAAA,aAAA,YAAA;EAAA,SAAA,WAAA,GAAA,CA6DA;EA5DS,WAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,UAAa,IAAiB,EAAA;IAC5B,IAAM,OAAO,GAAQ,IAAI;IACzB,QAAQ,OAAO,CAAC,WAAW;MACzB,KAAK,OAAA,CAAA,WAAW;QACd,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;MACvC,KAAK,OAAA,CAAA,WAAW;QACd,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;MACvC,KAAK,OAAA,CAAA,MAAM;QACT,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;MAClC,KAAK,OAAA,CAAA,mBAAmB;QACtB,OAAO,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC;MAC/C,KAAK,OAAA,CAAA,gCAAgC;QACnC,OAAO,IAAI,CAAC,qCAAqC,CAAC,OAAO,CAAC;MAC5D,KAAK,OAAA,CAAA,uBAAuB;QAC1B,OAAO,IAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC;MACnD,KAAK,OAAA,CAAA,UAAU;QACb,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;MACtC,KAAK,OAAA,CAAA,WAAW;QACd,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;MACvC,KAAK,OAAA,CAAA,QAAQ;QACX,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;MACpC,KAAK,OAAA,CAAA,IAAI;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;MAChC;MACA;QACE,MAAM,KAAK,CAAC,sBAAsB,CAAC;IAAA;EAEzC,CAAC;EAED;EACO,WAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,UAAwB,IAAiB,EAAA,CAAQ,CAAC;EAElD;EACO,WAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,UAAwB,IAAiB,EAAA,CAAQ,CAAC;EAElD;EACO,WAAA,CAAA,SAAA,CAAA,WAAW,GAAlB,UAAmB,IAAY,EAAA,CAAQ,CAAC;EAExC;EACO,WAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,UAAuB,IAAgB,EAAA,CAAQ,CAAC;EAEhD;EACO,WAAA,CAAA,SAAA,CAAA,wBAAwB,GAA/B,UAAgC,IAAyB,EAAA,CAAQ,CAAC;EAElE;EACO,WAAA,CAAA,SAAA,CAAA,qCAAqC,GAA5C,UACE,IAAsC,EAAA,CAChC,CAAC;EAET;EACO,WAAA,CAAA,SAAA,CAAA,4BAA4B,GAAnC,UAAoC,IAA6B,EAAA,CAAQ,CAAC;EAE1E;EACO,WAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,UAAwB,IAAiB,EAAA,CAAQ,CAAC;EAElD;EACO,WAAA,CAAA,SAAA,CAAA,aAAa,GAApB,UAAqB,IAAc,EAAA,CAAQ,CAAC;EAE5C;EACO,WAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UAAiB,IAAU,EAAA,CAAQ,CAAC;EACtC,OAAA,WAAC;AAAD,CAAC,EAAA;AA7DqB,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GAstVisitor = void 0;\nvar model_1 = require(\"./model\");\nvar GAstVisitor = /** @class */ (function () {\n    function GAstVisitor() {\n    }\n    GAstVisitor.prototype.visit = function (node) {\n        var nodeAny = node;\n        switch (nodeAny.constructor) {\n            case model_1.NonTerminal:\n                return this.visitNonTerminal(nodeAny);\n            case model_1.Alternative:\n                return this.visitAlternative(nodeAny);\n            case model_1.Option:\n                return this.visitOption(nodeAny);\n            case model_1.RepetitionMandatory:\n                return this.visitRepetitionMandatory(nodeAny);\n            case model_1.RepetitionMandatoryWithSeparator:\n                return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n            case model_1.RepetitionWithSeparator:\n                return this.visitRepetitionWithSeparator(nodeAny);\n            case model_1.Repetition:\n                return this.visitRepetition(nodeAny);\n            case model_1.Alternation:\n                return this.visitAlternation(nodeAny);\n            case model_1.Terminal:\n                return this.visitTerminal(nodeAny);\n            case model_1.Rule:\n                return this.visitRule(nodeAny);\n            /* istanbul ignore next */\n            default:\n                throw Error(\"non exhaustive match\");\n        }\n    };\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    GAstVisitor.prototype.visitNonTerminal = function (node) { };\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    GAstVisitor.prototype.visitAlternative = function (node) { };\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    GAstVisitor.prototype.visitOption = function (node) { };\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    GAstVisitor.prototype.visitRepetition = function (node) { };\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    GAstVisitor.prototype.visitRepetitionMandatory = function (node) { };\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    GAstVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) { };\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    GAstVisitor.prototype.visitRepetitionWithSeparator = function (node) { };\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    GAstVisitor.prototype.visitAlternation = function (node) { };\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    GAstVisitor.prototype.visitTerminal = function (node) { };\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    GAstVisitor.prototype.visitRule = function (node) { };\n    return GAstVisitor;\n}());\nexports.GAstVisitor = GAstVisitor;\n//# sourceMappingURL=visitor.js.map"]},"metadata":{},"sourceType":"script"}