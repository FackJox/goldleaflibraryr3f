{"ast":null,"code":"import _slicedToArray from \"/run/media/private/jack/Media/Projects/GoldenLeaf/LibraryR3F/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallbackRef as e } from \"@radix-ui/react-use-callback-ref\";\nimport * as t from \"react\";\nexport function useControllableState(_ref) {\n  var o = _ref.prop,\n    r = _ref.defaultProp,\n    _ref$onChange = _ref.onChange,\n    n = _ref$onChange === void 0 ? function () {} : _ref$onChange;\n  var _ref2 = function (_ref4) {\n      var o = _ref4.defaultProp,\n        r = _ref4.onChange;\n      var n = t.useState(o),\n        _n = _slicedToArray(n, 1),\n        a = _n[0],\n        u = t.useRef(a),\n        c = e(r);\n      return t.useEffect(function () {\n        u.current !== a && (c(a), u.current = a);\n      }, [a, u, c]), n;\n    }({\n      defaultProp: r,\n      onChange: n\n    }),\n    _ref3 = _slicedToArray(_ref2, 2),\n    a = _ref3[0],\n    u = _ref3[1],\n    c = void 0 !== o,\n    f = c ? o : a,\n    l = e(n);\n  return [f, t.useCallback(function (e) {\n    if (c) {\n      var _t = e,\n        _r = \"function\" == typeof e ? _t(o) : e;\n      _r !== o && l(_r);\n    } else u(e);\n  }, [c, o, u, l])];\n}","map":{"version":3,"sources":["packages/react/use-controllable-state/src/useControllableState.tsx"],"names":["useControllableState","prop","defaultProp","onChange","uncontrolledProp","setUncontrolledProp","useUncontrolledState","isControlled","undefined","value","handleChange","useCallbackRef","React","useCallback","nextValue","setter","uncontrolledState","useState","prevValueRef","useRef","useEffect","current"],"mappings":";;;OAWA,SAASA,oBAAAA,OAGI;EAAA,IAFXC,CAAAA,QAD+BA,IAAAA;IAE/BC,CAAAA,QAF+BD,WAAAA;IAAAA,qBAAAA,QAAAA;IAG/BE,CAAAA,8BAAW,YAAA,CAAA,CAAA;EAEX,YAqBF,iBAEEA;MAAAA,IADAD,CAAAA,SAD+BA,WAAAA;QAE/BC,CAAAA,SAF+BD,QAAAA;MAIzBc,IAAAA,CAAAA,GAAoBJ,CAAAA,CAAMK,QAAAA,CAAwBf,CAAAA,CAAAA;QAAAA,oBACxCc,CAAAA;QAATP,CAAAA;QACDS,CAAAA,GAAeN,CAAAA,CAAMO,MAAAA,CAAOV,CAAAA,CAAAA;QAC5BC,CAAAA,GAAeC,CAAAA,CAAeR,CAAAA,CAAAA;MASpC,OAPAS,CAAAA,CAAMQ,SAAAA,CAAU,YAAA;QACVF,CAAAA,CAAaG,OAAAA,KAAYZ,CAAAA,KAC3BC,CAAAA,CAAaD,CAAAA,CAAAA,EACbS,CAAAA,CAAaG,OAAAA,GAAUZ,CAAAA,CAAAA;MAAAA,CAAAA,EAExB,CAACA,CAAAA,EAAOS,CAAAA,EAAcR,CAAAA,CAAAA,CAAAA,EAElBM,CAAAA;IAAAA,CArCyCV,CAAqB;MAAEJ,WAAAA,EAAAA,CAAAA;MAAaC,QAAAA,EAAAA;IAAAA,CAAAA,CAAAA;IAAAA;IAA7EC,CAAAA;IAAkBC,CAAAA;IACnBE,CAAAA,GAAAA,KAAwBC,CAAAA,KAATP,CAAAA;IACfQ,CAAAA,GAAQF,CAAAA,GAAeN,CAAAA,GAAOG,CAAAA;IAC9BM,CAAAA,GAAeC,CAAAA,CAAeR,CAAAA,CAAAA;EAepC,OAAO,CAACM,CAAAA,EAb8DG,CAAAA,CAAMC,WAAAA,CACzEC,UAAAA,CAAAA,EAAAA;IACC,IAAIP,CAAAA,EAAc;MAChB,IAAMQ,EAAAA,GAASD,CAAAA;QACTL,EAAAA,GAA6B,UAAA,IAAA,OAAdK,CAAAA,GAA2BC,EAAAA,CAAOd,CAAAA,CAAAA,GAAQa,CAAAA;MAC3DL,EAAAA,KAAUR,CAAAA,IAAMS,CAAAA,CAAaD,EAAAA,CAAAA;IAAAA,CAAAA,MAEjCJ,CAAAA,CAAoBS,CAAAA,CAAAA;EAAAA,CAAAA,EAGxB,CAACP,CAAAA,EAAcN,CAAAA,EAAMI,CAAAA,EAAqBK,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA","sourcesContent":["import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n"]},"metadata":{},"sourceType":"module"}