{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PerformanceTracer = void 0;\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar utils_1 = require(\"@chevrotain/utils\");\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar PerformanceTracer = /** @class */function () {\n  function PerformanceTracer() {}\n  PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n    if ((0, has_1.default)(config, \"traceInitPerf\")) {\n      var userTraceInitPerf = config.traceInitPerf;\n      var traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n      this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf; // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n    this.traceInitIndent = -1;\n  };\n  PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(\"\".concat(indent, \"--> <\").concat(phaseDesc, \">\"));\n      }\n      var _a = (0, utils_1.timer)(phaseImpl),\n        time = _a.time,\n        value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      var traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(\"\".concat(indent, \"<-- <\").concat(phaseDesc, \"> time: \").concat(time, \"ms\"));\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n  return PerformanceTracer;\n}();\nexports.PerformanceTracer = PerformanceTracer;","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/perf_tracer.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,IAAA,KAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;AAEG;AACH,IAAA,iBAAA,GAAA,aAAA,YAAA;EAAA,SAAA,iBAAA,GAAA,CA4CA;EAvCE,iBAAA,CAAA,SAAA,CAAA,qBAAqB,GAArB,UAAsB,MAAqB,EAAA;IACzC,IAAI,CAAA,CAAA,EAAA,KAAA,CAAA,OAAG,EAAC,MAAM,EAAE,eAAe,CAAC,EAAE;MAChC,IAAM,iBAAiB,GAAG,MAAM,CAAC,aAAa;MAC9C,IAAM,aAAa,GAAG,OAAO,iBAAiB,KAAK,QAAQ;MAC3D,IAAI,CAAC,iBAAiB,GAAG,aAAa,GAC1B,iBAAiB,GACzB,QAAQ;MACZ,IAAI,CAAC,aAAa,GAAG,aAAa,GAC9B,iBAAiB,GAAG,CAAC,GACpB,iBAA6B,CAAA,CAAC;KACpC,MAAM;MACL,IAAI,CAAC,iBAAiB,GAAG,CAAC;MAC1B,IAAI,CAAC,aAAa,GAAG,QAAA,CAAA,qBAAqB,CAAC,aAAa;IACzD;IAED,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;EAC3B,CAAC;EAED,iBAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAmC,SAAiB,EAAE,SAAkB,EAAA;IACtE;IACA;IACA,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,EAAE;MAC/B,IAAI,CAAC,eAAe,EAAE;MACtB,IAAM,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;MAC7D,IAAI,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,iBAAiB,EAAE;QACjD,OAAO,CAAC,GAAG,CAAC,EAAA,CAAA,MAAA,CAAG,MAAM,EAAA,OAAA,CAAA,CAAA,MAAA,CAAQ,SAAS,EAAA,GAAA,CAAG,CAAC;MAC3C;MACK,IAAA,EAAA,GAAkB,CAAA,CAAA,EAAA,OAAA,CAAA,KAAK,EAAC,SAAS,CAAC;QAAhC,IAAI,GAAA,EAAA,CAAA,IAAA;QAAE,KAAK,GAAA,EAAA,CAAA,KAAqB;MACxC;MACA,IAAM,WAAW,GAAG,IAAI,GAAG,EAAE,GAAG,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG;MAC1D,IAAI,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,iBAAiB,EAAE;QACjD,WAAW,CAAC,EAAA,CAAA,MAAA,CAAG,MAAM,EAAA,OAAA,CAAA,CAAA,MAAA,CAAQ,SAAS,EAAA,UAAA,CAAA,CAAA,MAAA,CAAW,IAAI,EAAA,IAAA,CAAI,CAAC;MAC3D;MACD,IAAI,CAAC,eAAe,EAAE;MACtB,OAAO,KAAK;KACb,MAAM;MACL,OAAO,SAAS,EAAE;IACnB;EACH,CAAC;EACH,OAAA,iBAAC;AAAD,CAAC,EAAA;AA5CY,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PerformanceTracer = void 0;\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar utils_1 = require(\"@chevrotain/utils\");\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar PerformanceTracer = /** @class */ (function () {\n    function PerformanceTracer() {\n    }\n    PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n        if ((0, has_1.default)(config, \"traceInitPerf\")) {\n            var userTraceInitPerf = config.traceInitPerf;\n            var traceIsNumber = typeof userTraceInitPerf === \"number\";\n            this.traceInitMaxIdent = traceIsNumber\n                ? userTraceInitPerf\n                : Infinity;\n            this.traceInitPerf = traceIsNumber\n                ? userTraceInitPerf > 0\n                : userTraceInitPerf; // assumes end user provides the correct config value/type\n        }\n        else {\n            this.traceInitMaxIdent = 0;\n            this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;\n        }\n        this.traceInitIndent = -1;\n    };\n    PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(\"\".concat(indent, \"--> <\").concat(phaseDesc, \">\"));\n            }\n            var _a = (0, utils_1.timer)(phaseImpl), time = _a.time, value = _a.value;\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n            var traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(\"\".concat(indent, \"<-- <\").concat(phaseDesc, \"> time: \").concat(time, \"ms\"));\n            }\n            this.traceInitIndent--;\n            return value;\n        }\n        else {\n            return phaseImpl();\n        }\n    };\n    return PerformanceTracer;\n}());\nexports.PerformanceTracer = PerformanceTracer;\n//# sourceMappingURL=perf_tracer.js.map"]},"metadata":{},"sourceType":"script"}