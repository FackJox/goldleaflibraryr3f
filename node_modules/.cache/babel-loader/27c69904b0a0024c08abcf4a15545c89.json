{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\nvar map_1 = __importDefault(require(\"lodash/map\"));\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\nvar filter_1 = __importDefault(require(\"lodash/filter\"));\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\nvar isFunction_1 = __importDefault(require(\"lodash/isFunction\"));\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\nvar lang_extensions_1 = require(\"../../lang/lang_extensions\");\nfunction defaultVisit(ctx, param) {\n  var childrenNames = (0, keys_1.default)(ctx);\n  var childrenNamesLength = childrenNames.length;\n  for (var i = 0; i < childrenNamesLength; i++) {\n    var currChildName = childrenNames[i];\n    var currChildArray = ctx[currChildName];\n    var currChildArrayLength = currChildArray.length;\n    for (var j = 0; j < currChildArrayLength; j++) {\n      var currChild = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexports.defaultVisit = defaultVisit;\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n  var derivedConstructor = function derivedConstructor() {};\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemantics\");\n  var semanticProto = {\n    visit: function visit(cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if ((0, isArray_1.default)(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n      // enables passing optional CstNodes concisely.\n      if ((0, isUndefined_1.default)(cstNode)) {\n        return undefined;\n      }\n      return this[cstNode.name](cstNode.children, param);\n    },\n    validateVisitor: function validateVisitor() {\n      var semanticDefinitionErrors = _validateVisitor(this, ruleNames);\n      if (!(0, isEmpty_1.default)(semanticDefinitionErrors)) {\n        var errorMessages = (0, map_1.default)(semanticDefinitionErrors, function (currDefError) {\n          return currDefError.msg;\n        });\n        throw Error(\"Errors Detected in CST Visitor <\".concat(this.constructor.name, \">:\\n\\t\") + \"\".concat(errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n      }\n    }\n  };\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  derivedConstructor._RULE_NAMES = ruleNames;\n  return derivedConstructor;\n}\nexports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n  var derivedConstructor = function derivedConstructor() {};\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n  var withDefaultsProto = Object.create(baseConstructor.prototype);\n  (0, forEach_1.default)(ruleNames, function (ruleName) {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  return derivedConstructor;\n}\nexports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;\nvar CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));\nfunction _validateVisitor(visitorInstance, ruleNames) {\n  var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n  return missingErrors;\n}\nexports.validateVisitor = _validateVisitor;\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n  var missingRuleNames = (0, filter_1.default)(ruleNames, function (currRuleName) {\n    return (0, isFunction_1.default)(visitorInstance[currRuleName]) === false;\n  });\n  var errors = (0, map_1.default)(missingRuleNames, function (currRuleName) {\n    return {\n      msg: \"Missing visitor method: <\".concat(currRuleName, \"> on \").concat(visitorInstance.constructor.name, \" CST Visitor.\"),\n      type: CstVisitorDefinitionError.MISSING_METHOD,\n      methodName: currRuleName\n    };\n  });\n  return (0, compact_1.default)(errors);\n}\nexports.validateMissingCstMethods = validateMissingCstMethods;","map":{"version":3,"sources":["../../../../src/parse/cst/cst_visitor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\nvar map_1 = __importDefault(require(\"lodash/map\"));\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\nvar filter_1 = __importDefault(require(\"lodash/filter\"));\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\nvar isFunction_1 = __importDefault(require(\"lodash/isFunction\"));\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\nvar lang_extensions_1 = require(\"../../lang/lang_extensions\");\nfunction defaultVisit(ctx, param) {\n    var childrenNames = (0, keys_1.default)(ctx);\n    var childrenNamesLength = childrenNames.length;\n    for (var i = 0; i < childrenNamesLength; i++) {\n        var currChildName = childrenNames[i];\n        var currChildArray = ctx[currChildName];\n        var currChildArrayLength = currChildArray.length;\n        for (var j = 0; j < currChildArrayLength; j++) {\n            var currChild = currChildArray[j];\n            // distinction between Tokens Children and CstNode children\n            if (currChild.tokenTypeIdx === undefined) {\n                this[currChild.name](currChild.children, param);\n            }\n        }\n    }\n    // defaultVisit does not support generic out param\n}\nexports.defaultVisit = defaultVisit;\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    var derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemantics\");\n    var semanticProto = {\n        visit: function (cstNode, param) {\n            // enables writing more concise visitor methods when CstNode has only a single child\n            if ((0, isArray_1.default)(cstNode)) {\n                // A CST Node's children dictionary can never have empty arrays as values\n                // If a key is defined there will be at least one element in the corresponding value array.\n                cstNode = cstNode[0];\n            }\n            // enables passing optional CstNodes concisely.\n            if ((0, isUndefined_1.default)(cstNode)) {\n                return undefined;\n            }\n            return this[cstNode.name](cstNode.children, param);\n        },\n        validateVisitor: function () {\n            var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n            if (!(0, isEmpty_1.default)(semanticDefinitionErrors)) {\n                var errorMessages = (0, map_1.default)(semanticDefinitionErrors, function (currDefError) { return currDefError.msg; });\n                throw Error(\"Errors Detected in CST Visitor <\".concat(this.constructor.name, \">:\\n\\t\") +\n                    \"\".concat(errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n            }\n        }\n    };\n    derivedConstructor.prototype = semanticProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    derivedConstructor._RULE_NAMES = ruleNames;\n    return derivedConstructor;\n}\nexports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    var derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n    var withDefaultsProto = Object.create(baseConstructor.prototype);\n    (0, forEach_1.default)(ruleNames, function (ruleName) {\n        withDefaultsProto[ruleName] = defaultVisit;\n    });\n    derivedConstructor.prototype = withDefaultsProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    return derivedConstructor;\n}\nexports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;\nvar CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));\nfunction validateVisitor(visitorInstance, ruleNames) {\n    var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n    return missingErrors;\n}\nexports.validateVisitor = validateVisitor;\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n    var missingRuleNames = (0, filter_1.default)(ruleNames, function (currRuleName) {\n        return (0, isFunction_1.default)(visitorInstance[currRuleName]) === false;\n    });\n    var errors = (0, map_1.default)(missingRuleNames, function (currRuleName) {\n        return {\n            msg: \"Missing visitor method: <\".concat(currRuleName, \"> on \").concat((visitorInstance.constructor.name), \" CST Visitor.\"),\n            type: CstVisitorDefinitionError.MISSING_METHOD,\n            methodName: currRuleName\n        };\n    });\n    return (0, compact_1.default)(errors);\n}\nexports.validateMissingCstMethods = validateMissingCstMethods;\n//# sourceMappingURL=cst_visitor.js.map"]},"metadata":{},"sourceType":"script"}