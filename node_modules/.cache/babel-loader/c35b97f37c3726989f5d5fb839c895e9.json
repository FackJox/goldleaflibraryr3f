{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeBuilder = void 0;\nvar cst_1 = require(\"../../cst/cst\");\nvar noop_1 = __importDefault(require(\"lodash/noop\"));\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\nvar cst_visitor_1 = require(\"../../cst/cst_visitor\");\nvar parser_1 = require(\"../parser\");\n/**\n * This trait is responsible for the CST building logic.\n */\nvar TreeBuilder = /** @class */function () {\n  function TreeBuilder() {}\n  TreeBuilder.prototype.initTreeBuilder = function (config) {\n    this.CST_STACK = [];\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = config.outputCst;\n    this.nodeLocationTracking = (0, has_1.default)(config, \"nodeLocationTracking\") ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop_1.default;\n      this.cstFinallyStateUpdate = noop_1.default;\n      this.cstPostTerminal = noop_1.default;\n      this.cstPostNonTerminal = noop_1.default;\n      this.cstPostRule = noop_1.default;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = cst_1.setNodeLocationFull;\n          this.setNodeLocationFromNode = cst_1.setNodeLocationFull;\n          this.cstPostRule = noop_1.default;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop_1.default;\n          this.setNodeLocationFromNode = noop_1.default;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = cst_1.setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = cst_1.setNodeLocationOnlyOffset;\n          this.cstPostRule = noop_1.default;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop_1.default;\n          this.setNodeLocationFromNode = noop_1.default;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop_1.default;\n        this.setNodeLocationFromNode = noop_1.default;\n        this.cstPostRule = noop_1.default;\n        this.setInitialNodeLocation = noop_1.default;\n      } else {\n        throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\".concat(config.nodeLocationTracking, \"\\\"\"));\n      }\n    }\n  };\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN\n    };\n  };\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN\n    };\n  };\n  TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n        * @param cstNode\n     */\n  TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {\n    var nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n  TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName) {\n    var cstNode = {\n      name: fullRuleName,\n      children: Object.create(null)\n    };\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  };\n  TreeBuilder.prototype.cstFinallyStateUpdate = function () {\n    this.CST_STACK.pop();\n  };\n  TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    var prevToken = this.LA(0);\n    var loc = ruleCstNode.location;\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  };\n  TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {\n    var prevToken = this.LA(0);\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    var loc = ruleCstNode.location;\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  };\n  TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {\n    var rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    (0, cst_1.addTerminalToCst)(rootCst, consumedToken, key);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location, consumedToken);\n  };\n  TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {\n    var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    (0, cst_1.addNoneTerminalToCst)(preCstNode, ruleName, ruleCstResult);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n  };\n  TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {\n    if ((0, isUndefined_1.default)(this.baseCstVisitorConstructor)) {\n      var newBaseCstVisitorConstructor = (0, cst_visitor_1.createBaseSemanticVisitorConstructor)(this.className, (0, keys_1.default)(this.gastProductionsCache));\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n    return this.baseCstVisitorConstructor;\n  };\n  TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {\n    if ((0, isUndefined_1.default)(this.baseCstVisitorWithDefaultsConstructor)) {\n      var newConstructor = (0, cst_visitor_1.createBaseVisitorConstructorWithDefaults)(this.className, (0, keys_1.default)(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n    return this.baseCstVisitorWithDefaultsConstructor;\n  };\n  TreeBuilder.prototype.getLastExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  };\n  TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  };\n  TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {\n    var occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  };\n  return TreeBuilder;\n}();\nexports.TreeBuilder = TreeBuilder;","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/tree_builder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TreeBuilder = void 0;\nvar cst_1 = require(\"../../cst/cst\");\nvar noop_1 = __importDefault(require(\"lodash/noop\"));\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\nvar cst_visitor_1 = require(\"../../cst/cst_visitor\");\nvar parser_1 = require(\"../parser\");\n/**\n * This trait is responsible for the CST building logic.\n */\nvar TreeBuilder = /** @class */ (function () {\n    function TreeBuilder() {\n    }\n    TreeBuilder.prototype.initTreeBuilder = function (config) {\n        this.CST_STACK = [];\n        // outputCst is no longer exposed/defined in the pubic API\n        this.outputCst = config.outputCst;\n        this.nodeLocationTracking = (0, has_1.default)(config, \"nodeLocationTracking\")\n            ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n            : parser_1.DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n        if (!this.outputCst) {\n            this.cstInvocationStateUpdate = noop_1.default;\n            this.cstFinallyStateUpdate = noop_1.default;\n            this.cstPostTerminal = noop_1.default;\n            this.cstPostNonTerminal = noop_1.default;\n            this.cstPostRule = noop_1.default;\n        }\n        else {\n            if (/full/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = cst_1.setNodeLocationFull;\n                    this.setNodeLocationFromNode = cst_1.setNodeLocationFull;\n                    this.cstPostRule = noop_1.default;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = noop_1.default;\n                    this.setNodeLocationFromNode = noop_1.default;\n                    this.cstPostRule = this.cstPostRuleFull;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n                }\n            }\n            else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = cst_1.setNodeLocationOnlyOffset;\n                    this.setNodeLocationFromNode = cst_1.setNodeLocationOnlyOffset;\n                    this.cstPostRule = noop_1.default;\n                    this.setInitialNodeLocation =\n                        this.setInitialNodeLocationOnlyOffsetRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = noop_1.default;\n                    this.setNodeLocationFromNode = noop_1.default;\n                    this.cstPostRule = this.cstPostRuleOnlyOffset;\n                    this.setInitialNodeLocation =\n                        this.setInitialNodeLocationOnlyOffsetRegular;\n                }\n            }\n            else if (/none/i.test(this.nodeLocationTracking)) {\n                this.setNodeLocationFromToken = noop_1.default;\n                this.setNodeLocationFromNode = noop_1.default;\n                this.cstPostRule = noop_1.default;\n                this.setInitialNodeLocation = noop_1.default;\n            }\n            else {\n                throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\".concat(config.nodeLocationTracking, \"\\\"\"));\n            }\n        }\n    };\n    TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            endOffset: NaN\n        };\n    };\n    TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {\n        cstNode.location = {\n            // without error recovery the starting Location of a new CstNode is guaranteed\n            // To be the next Token's startOffset (for valid inputs).\n            // For invalid inputs there won't be any CSTOutput so this potential\n            // inaccuracy does not matter\n            startOffset: this.LA(1).startOffset,\n            endOffset: NaN\n        };\n    };\n    TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            startLine: NaN,\n            startColumn: NaN,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN\n        };\n    };\n    /**\n       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n  \n       * @param cstNode\n       */\n    TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {\n        var nextToken = this.LA(1);\n        cstNode.location = {\n            startOffset: nextToken.startOffset,\n            startLine: nextToken.startLine,\n            startColumn: nextToken.startColumn,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN\n        };\n    };\n    TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName) {\n        var cstNode = {\n            name: fullRuleName,\n            children: Object.create(null)\n        };\n        this.setInitialNodeLocation(cstNode);\n        this.CST_STACK.push(cstNode);\n    };\n    TreeBuilder.prototype.cstFinallyStateUpdate = function () {\n        this.CST_STACK.pop();\n    };\n    TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {\n        // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n        var prevToken = this.LA(0);\n        var loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n            loc.endLine = prevToken.endLine;\n            loc.endColumn = prevToken.endColumn;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n            loc.startLine = NaN;\n            loc.startColumn = NaN;\n        }\n    };\n    TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {\n        var prevToken = this.LA(0);\n        // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n        var loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n        }\n    };\n    TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {\n        var rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n        (0, cst_1.addTerminalToCst)(rootCst, consumedToken, key);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromToken(rootCst.location, consumedToken);\n    };\n    TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {\n        var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n        (0, cst_1.addNoneTerminalToCst)(preCstNode, ruleName, ruleCstResult);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n    };\n    TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {\n        if ((0, isUndefined_1.default)(this.baseCstVisitorConstructor)) {\n            var newBaseCstVisitorConstructor = (0, cst_visitor_1.createBaseSemanticVisitorConstructor)(this.className, (0, keys_1.default)(this.gastProductionsCache));\n            this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n            return newBaseCstVisitorConstructor;\n        }\n        return this.baseCstVisitorConstructor;\n    };\n    TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {\n        if ((0, isUndefined_1.default)(this.baseCstVisitorWithDefaultsConstructor)) {\n            var newConstructor = (0, cst_visitor_1.createBaseVisitorConstructorWithDefaults)(this.className, (0, keys_1.default)(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n            this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n            return newConstructor;\n        }\n        return this.baseCstVisitorWithDefaultsConstructor;\n    };\n    TreeBuilder.prototype.getLastExplicitRuleShortName = function () {\n        var ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 1];\n    };\n    TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {\n        var ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 2];\n    };\n    TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {\n        var occurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return occurrenceStack[occurrenceStack.length - 1];\n    };\n    return TreeBuilder;\n}());\nexports.TreeBuilder = TreeBuilder;\n//# sourceMappingURL=tree_builder.js.map"]},"metadata":{},"sourceType":"script"}