{"ast":null,"code":"import * as e from \"react\";\nexport function usePrevious(r) {\n  var t = e.useRef(r);\n  return e.useEffect(function () {\n    t.current = r;\n  }, [r]), t.current;\n}","map":{"version":3,"sources":["packages/react/use-previous/src/usePrevious.tsx"],"names":["usePrevious","value","ref","React","useRef","useEffect","current"],"mappings":";OAEA,SAASA,WAAAA,CAAeC,CAAAA,EAAAA;EAGtB,IAAMC,CAAAA,GAAMC,CAAAA,CAAMC,MAAAA,CAAUH,CAAAA,CAAAA;EAQ5B,OALAE,CAAAA,CAAME,SAAAA,CAAU,YAAA;IACdH,CAAAA,CAAII,OAAAA,GAAUL,CAAAA;EAAAA,CAAAA,EACb,CAACA,CAAAA,CAAAA,CAAAA,EAGGC,CAAAA,CAAII,OAAAA;AAAAA","sourcesContent":["import * as React from 'react';\n\nfunction usePrevious<T>(value: T) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = React.useRef<T>(value);\n\n  // Store current value in ref\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\nexport { usePrevious };\n"]},"metadata":{},"sourceType":"module"}