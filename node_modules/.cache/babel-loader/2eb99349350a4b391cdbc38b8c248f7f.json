{"ast":null,"code":"import _slicedToArray from \"/run/media/private/jack/Media/Projects/GoldenLeaf/LibraryR3F/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as e from \"react\";\nexport function useSize(r) {\n  var _e$useState = e.useState(void 0),\n    _e$useState2 = _slicedToArray(_e$useState, 2),\n    i = _e$useState2[0],\n    t = _e$useState2[1];\n  return e.useEffect(function () {\n    if (r) {\n      var _e = new ResizeObserver(function (e) {\n        if (!Array.isArray(e)) return;\n        if (!e.length) return;\n        var i = e[0];\n        var o, n;\n        if (\"borderBoxSize\" in i) {\n          var _e2 = i.borderBoxSize,\n            _r = Array.isArray(_e2) ? _e2[0] : _e2;\n          o = _r.inlineSize, n = _r.blockSize;\n        } else {\n          var _e3 = r.getBoundingClientRect();\n          o = _e3.width, n = _e3.height;\n        }\n        t({\n          width: o,\n          height: n\n        });\n      });\n      return _e.observe(r, {\n        box: \"border-box\"\n      }), function () {\n        t(void 0), _e.unobserve(r);\n      };\n    }\n  }, [r]), i;\n}","map":{"version":3,"sources":["packages/react/use-size/src/useSize.tsx"],"names":["useSize","element","size","setSize","React","useState","undefined","useEffect","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","width","height","borderSizeEntry","borderSize","rect","getBoundingClientRect","observe","box","unobserve"],"mappings":";;OAIA,SAASA,OAAAA,CAAQC,CAAAA,EAAAA;EACf,kBAAwBG,CAAAA,CAAMC,QAAAA,CAAAA,KAAwDC,CAAAA,CAAAA;IAAAA;IAA/EJ,CAAAA;IAAMC,CAAAA;EA8Cb,OA5CAC,CAAAA,CAAMG,SAAAA,CAAU,YAAA;IACd,IAAIN,CAAAA,EAAS;MACX,IAAMO,EAAAA,GAAiB,IAAIC,cAAAA,CAAgBC,UAAAA,CAAAA,EAAAA;QACzC,IAAA,CAAKC,KAAAA,CAAMC,OAAAA,CAAQF,CAAAA,CAAAA,EACjB;QAKF,IAAA,CAAKA,CAAAA,CAAQG,MAAAA,EACX;QAGF,IAAMC,CAAAA,GAAQJ,CAAAA,CAAQ,CAAA,CAAA;QACtB,IAAIK,CAAAA,EACAC,CAAAA;QAEJ,IAAI,eAAA,IAAmBF,CAAAA,EAAO;UAC5B,IAAMG,GAAAA,GAAkBH,CAAAA,CAAK,aAAA;YAEvBI,EAAAA,GAAaP,KAAAA,CAAMC,OAAAA,CAAQK,GAAAA,CAAAA,GAAmBA,GAAAA,CAAgB,CAAA,CAAA,GAAKA,GAAAA;UACzEF,CAAAA,GAAQG,EAAAA,CAAU,UAAA,EAClBF,CAAAA,GAASE,EAAAA,CAAU,SAAA;QAAA,CAAA,MACd;UAGL,IAAMC,GAAAA,GAAOlB,CAAAA,CAAQmB,qBAAAA,EAAAA;UACrBL,CAAAA,GAAQI,GAAAA,CAAKJ,KAAAA,EACbC,CAAAA,GAASG,GAAAA,CAAKH,MAAAA;QAAAA;QAGhBb,CAAAA,CAAQ;UAAEY,KAAAA,EAAAA,CAAAA;UAAOC,MAAAA,EAAAA;QAAAA,CAAAA,CAAAA;MAAAA,CAAAA,CAAAA;MAKnB,OAFAR,EAAAA,CAAea,OAAAA,CAAQpB,CAAAA,EAAS;QAAEqB,GAAAA,EAAK;MAAA,CAAA,CAAA,EAEhC,YAAA;QACLnB,CAAAA,CAAAA,KAAQG,CAAAA,CAAAA,EACRE,EAAAA,CAAee,SAAAA,CAAUtB,CAAAA,CAAAA;MAAAA,CAAAA;IAAAA;EAAAA,CAAAA,EAI5B,CAACA,CAAAA,CAAAA,CAAAA,EAEGC,CAAAA;AAAAA","sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\n\nfunction useSize(element: HTMLElement | SVGElement | null) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  React.useEffect(() => {\n    if (element) {\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate a rect ourselves to get the correct border box.\n          const rect = element.getBoundingClientRect();\n          width = rect.width;\n          height = rect.height;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(element, { box: 'border-box' });\n\n      return () => {\n        setSize(undefined);\n        resizeObserver.unobserve(element);\n      };\n    }\n    return;\n  }, [element]);\n\n  return size;\n}\n\nexport { useSize };\n"]},"metadata":{},"sourceType":"module"}